Printing analysis 'Available Expression Analysis Guardian Pass' for function '__cxx_global_var_init':
Available Expression AnalysisS: 
representation :   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #1
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   ret void
#Edge incoming
TOP

#Edge outcoming
TOP


representation : 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #1
  ret void

#Edge incoming
TOP
TOP

#Edge outcoming
TOP


Printing analysis 'Available Expression Analysis Guardian Pass' for function 'main':
Available Expression AnalysisS: 
representation :   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #1
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   ret void
#Edge incoming
TOP

#Edge outcoming
TOP


representation : 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #1
  ret void

#Edge incoming
TOP
TOP

#Edge outcoming
TOP


representation :   %retval = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %a = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %b = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %i = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %x = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %m = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %w = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 0, i32* %retval
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 1, i32* %a, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 4, i32* %b, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %0 = load i32* %a, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %1 = load i32* %b, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %add = add nsw i32 %0, %1
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %add, i32* %i, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %2 = load i32* %i, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %mul = mul nsw i32 %2, 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %mul, i32* %x, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %3 = load i32* %a, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %4 = load i32* %x, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %add1 = add nsw i32 %3, %4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %add1, i32* %m, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %5 = load i32* %m, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %mul2 = mul nsw i32 4, %5
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %mul2, i32* %w, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   ret i32 0
#Edge incoming
TOP

#Edge outcoming
TOP


representation : 
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %m = alloca i32, align 4
  %w = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 1, i32* %a, align 4
  store i32 4, i32* %b, align 4
  %0 = load i32* %a, align 4
  %1 = load i32* %b, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %i, align 4
  %2 = load i32* %i, align 4
  %mul = mul nsw i32 %2, 4
  store i32 %mul, i32* %x, align 4
  %3 = load i32* %a, align 4
  %4 = load i32* %x, align 4
  %add1 = add nsw i32 %3, %4
  store i32 %add1, i32* %m, align 4
  %5 = load i32* %m, align 4
  %mul2 = mul nsw i32 4, %5
  store i32 %mul2, i32* %w, align 4
  ret i32 0

#Edge incoming
TOP
TOP

#Edge outcoming
TOP


Printing analysis 'Available Expression Analysis Guardian Pass' for function '_GLOBAL__I_a':
Available Expression AnalysisS: 
representation :   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #1
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   ret void
#Edge incoming
TOP

#Edge outcoming
TOP


representation : 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #1
  ret void

#Edge incoming
TOP
TOP

#Edge outcoming
TOP


representation :   %retval = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %a = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %b = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %i = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %x = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %m = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %w = alloca i32, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 0, i32* %retval
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 1, i32* %a, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 4, i32* %b, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %0 = load i32* %a, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %1 = load i32* %b, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %add = add nsw i32 %0, %1
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %add, i32* %i, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %2 = load i32* %i, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %mul = mul nsw i32 %2, 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %mul, i32* %x, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %3 = load i32* %a, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %4 = load i32* %x, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %add1 = add nsw i32 %3, %4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %add1, i32* %m, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %5 = load i32* %m, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   %mul2 = mul nsw i32 4, %5
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   store i32 %mul2, i32* %w, align 4
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   ret i32 0
#Edge incoming
TOP

#Edge outcoming
TOP


representation : 
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %m = alloca i32, align 4
  %w = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 1, i32* %a, align 4
  store i32 4, i32* %b, align 4
  %0 = load i32* %a, align 4
  %1 = load i32* %b, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, i32* %i, align 4
  %2 = load i32* %i, align 4
  %mul = mul nsw i32 %2, 4
  store i32 %mul, i32* %x, align 4
  %3 = load i32* %a, align 4
  %4 = load i32* %x, align 4
  %add1 = add nsw i32 %3, %4
  store i32 %add1, i32* %m, align 4
  %5 = load i32* %m, align 4
  %mul2 = mul nsw i32 4, %5
  store i32 %mul2, i32* %w, align 4
  ret i32 0

#Edge incoming
TOP
TOP

#Edge outcoming
TOP


representation :   call void @__cxx_global_var_init()
#Edge incoming
TOP

#Edge outcoming
TOP


representation :   ret void
#Edge incoming
TOP

#Edge outcoming
TOP


representation : 
entry:
  call void @__cxx_global_var_init()
  ret void

#Edge incoming
TOP
TOP

#Edge outcoming
TOP


