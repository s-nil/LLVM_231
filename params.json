{"name":"LLVM  231 optimization -- course project","tagline":"CSE231 FA15","body":"# LLVM_231\r\n![Build status](https://img.shields.io/badge/build-pass-green.svg) \r\n![progress](https://img.shields.io/badge/progress-All%20Done-green.svg)\r\n![Emotion](https://img.shields.io/badge/emotion-Happy-red.svg)\r\n\r\nLLVM project for CSE 231Fall15\r\n\r\n#Project 2\r\nProject 2 has 4 parts.\r\n\r\n|Analysis | Use of Analysis Results|\r\n|----------------------- |---------------------------|\r\n|Constant Propagation\t | Optimization: Constant Folding, Branch Folding|\r\n|Available Expressions\t |Optimization: Common Sub-expression Elminiation|\r\n|Range Analysis |\tBug finder: Warn programmer if can't show array access in bounds|\r\n|Intra-Procedural Pointer Analysis\t|Catalyst: Improve all other analyses using this information|\r\n\r\n\r\nFor this part, we modulaize three sections for implementation of this project. They are:\r\n\r\n* Guardian\r\n* Artisan\r\n* Miner\r\n\r\n\r\n## Work Flow:\r\n![flow](https://cloud.githubusercontent.com/assets/6581499/11835593/a04011a4-a389-11e5-9779-f75b22db2fe4.png)\r\n\r\n* ### Guardian\r\n Guardian is the analysis for the program. For example, for pointer analysis, it will run Anderson al- gorithm based on IR of code.\r\n* ### Artisan\r\n Artisan is a wrapper for Guardian result. It will display in text or graphic representation. For example, in pointer analysis, it gives the the graphic represen- tation of the pointer relation with arrows.\r\n For example, for pointer analysis, it gives a intutive graph represtation of pointer analysis.\r\n ![artisan for pointer](https://cloud.githubusercontent.com/assets/6581499/11835714/625193ee-a38a-11e5-98c4-b8d0876b5638.png)\r\n\r\n* ### Miner\r\nMineristheoptimizer.AccordingtotheGuardian's result, it does the optimization on the source file and output optimized file.\r\n ![Miner work resuilt](https://cloud.githubusercontent.com/assets/6581499/11835760/a576f31c-a38a-11e5-99dc-aa6be1aff961.png)\r\n\r\n\r\n\r\n## Lattice Structure\r\n\r\n* LatticeNode: \r\n\t* the node in the lattic\r\n* LatticeEdge: \r\n\t* the edge connecting each node\r\n* Flow: \r\n\t* the information stored in each edge\r\n\t\r\n![Lattice Structure](https://cloud.githubusercontent.com/assets/6581499/11835806/f2dbd7da-a38a-11e5-826d-85c840394cd7.png)\r\n\r\n\r\n\r\n## Run the \r\n### environment\r\n```\r\nsource startenv.sh\r\n\r\n#install artisan library\r\napt-get install python-gtk2 graphviz\r\nsudo pip install xdot\r\n```\r\n\r\n### run script\r\nTo save your life, we prepare the runscript for you to test the test case in `P2`.\r\n```\r\n/runscript/P2runAll.sh\r\n```\r\n\r\nAn simple example to run the Guardian -> Artisan -> Miner\r\n```\r\n#guardian\r\n./runscripts/guardian/runPointer.sh ${CSE231ROOT}/P2test/optimizerSimple\r\n\r\n#artisan\r\n./runscripts/artisan/draw.sh ${CSE231ROOT}/P2test/optimizerSimple\r\n\r\n#miner\r\n./runscripts/miner/dig.sh ${CSE231ROOT}/P2test/optimizerSimple\r\n\r\n```\r\n\r\n# Project 1\r\nThere are three parts in Paroject 1\r\n* Part 1: Collecting Static Instruction Counts\r\n* Part 2: Collecting Dynamic Instruction Counts\r\n* Part 3: Profiling Branch Bias\r\n\r\n## source file are at \r\n* passes:\r\n```\r\n/llvm/src/lib/CSE231\r\n```\r\n* helper function\r\n```\r\n/extra/instrument\r\n```\r\n*benchmark\r\n```\r\n/extra/benchmarks/\r\n\r\n## start environment\r\n```\r\nsource startenv.sh\r\n```\r\n\r\n## complie library\r\n```\r\nmake llvm\r\n```\r\nIt compiles the code of project into CSE231.so\r\n\r\n## run script\r\nwe prepare the runscript for you.\r\nIf you want to run section `x`\r\n```\r\n/runscripts/run-sectionx.sh\r\n```\r\n\r\nresult will be in the `logs`.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}